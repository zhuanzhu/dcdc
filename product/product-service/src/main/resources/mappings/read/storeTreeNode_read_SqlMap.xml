<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.egeo.components.product.dao.read.StoreTreeNodeReadDAO">
	<resultMap type="com.egeo.components.product.po.StoreTreeNodePO" id="storeTreeNodeMap">
		<result property="id" column="id" />
		<result property="parentId" column="parent_id" />
		<result property="pids" column="pids" />
		<result property="storeTreeId" column="store_tree_id" />
		<result property="storeId" column="store_id" />
		<result property="listSort" column="list_sort" />
		<result property="createTime" column="create_time" />
		<result property="updateTime" column="update_time" />
		<result property="platformId" column="platform_id" />
	</resultMap>


	<resultMap type="com.egeo.components.product.condition.StoreTreeNodeCondition" id="storeTreeNodeConditionMap" extends="storeTreeNodeMap">
		<result property="name" column="name" />
	</resultMap>

	<sql id="storeTreeNodeColumns">
		id,
		parent_id,
		pids,
		store_tree_id,
		store_id,
		list_sort,
		create_time,
		update_time,
		platform_id
	</sql>

	<select id="findById" parameterType="com.egeo.components.product.po.StoreTreeNodePO" resultMap="storeTreeNodeMap">
		SELECT
		<include refid="storeTreeNodeColumns" />
		FROM store_tree_node
		WHERE id = #{po.id}
	</select>

	<select id="findOfPage" resultMap="storeTreeNodeMap">
		SELECT
		<include refid="storeTreeNodeColumns" />
		FROM store_tree_node
		<where>
			<if test="po.parentId != null">
				and parent_id = #{po.parentId}
			</if>
			<if test="po.pids != null">
				and pids = #{po.pids}
			</if>
			<if test="po.storeTreeId != null">
				and store_tree_id = #{po.storeTreeId}
			</if>
			<if test="po.storeId != null">
				and store_id = #{po.storeId}
			</if>
			<if test="po.listSort != null">
				and list_sort = #{po.listSort}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>		
			<otherwise>
				ORDER BY id desc		
			</otherwise>
		</choose>
		<if test="page != null">
		limit #{page.limitStart},#{page.pageSize}
		</if>
	</select>
	
	<select id="countOfPage" resultType="java.lang.Integer">
		SELECT
		count(1) cnt
		FROM store_tree_node
		<where>
			<if test="po.parentId != null">
				and parent_id = #{po.parentId}
			</if>
			<if test="po.pids != null">
				and pids = #{po.pids}
			</if>
			<if test="po.storeTreeId != null">
				and store_tree_id = #{po.storeTreeId}
			</if>
			<if test="po.storeId != null">
				and store_id = #{po.storeId}
			</if>
			<if test="po.listSort != null">
				and list_sort = #{po.listSort}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
	</select>
	
	<select id="findAll" resultMap="storeTreeNodeMap">
		SELECT
		<include refid="storeTreeNodeColumns" />
		FROM store_tree_node
		<where>
			<if test="po.parentId != null">
				and parent_id = #{po.parentId}
			</if>
			<if test="po.pids != null">
				and pids = #{po.pids}
			</if>
			<if test="po.storeTreeId != null">
				and store_tree_id = #{po.storeTreeId}
			</if>
			<if test="po.storeId != null">
				and store_id = #{po.storeId}
			</if>
			<if test="po.listSort != null">
				and list_sort = #{po.listSort}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>			
			<otherwise>
				ORDER BY id desc		
			</otherwise>
		</choose>
	</select>
	<select id="getMaxListSort" parameterType="com.egeo.components.product.po.StoreTreeNodePO" resultType="java.lang.Integer">
		SELECT
		max(list_sort)
		FROM store_tree_node
		<where>
			<if test="po.parentId != null">
				and parent_id = #{po.parentId}
			</if>
			<if test="po.storeTreeId != null">
				and store_tree_id = #{po.storeTreeId}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
	</select>	
	<select id="findStoreTreeNodeAllByPlatformId" resultType="java.lang.Long">
		SELECT
		store_id
		FROM store_tree_node
		WHERE parent_id != 0 and platform_id = #{platformId}
	</select>
	
	<select id="findByPids" resultType="java.lang.String">
		SELECT s.`name` from store_tree_node stn, store s
		WHERE stn.store_id = s.id and stn.id in(#{pids})
	</select>
	
	<select id="findHeadStoreByStoreId" resultType="java.lang.Long">
		SELECT
		parent_id
		FROM store_tree_node
		WHERE store_id = #{storeId}
	</select>
	
	<select id="findByStoreIdAndName" resultMap="storeTreeNodeConditionMap">
		SELECT 
		stn.id,
		stn.parent_id,
		stn.pids,
		stn.store_tree_id,
		stn.store_id,
		stn.list_sort,
		stn.create_time,
		stn.update_time,
		stn.platform_id,
		s.name
		 FROM store_tree_node stn, store s
		 <where>
		 	stn.store_id = s.id 
			<if test="storeIds !=null and storeIds.size() > 0 ">
				AND s.id in 
				<foreach collection="storeIds" item="storeId" open="(" separator="," close=")">
					#{storeId}
				</foreach>
			</if>
			<if test="name != null">
				and s.name like concat('%',#{name},'%')
			</if>
			<if test="platformId != null">
				and s.platform_id = #{platformId}
			</if>
		 </where>
	</select>
	
</mapper>
	