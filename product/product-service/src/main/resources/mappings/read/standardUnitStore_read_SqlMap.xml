<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.egeo.components.product.dao.read.StandardUnitStoreReadDAO">
	<resultMap type="com.egeo.components.product.po.StandardUnitStorePO" id="standardUnitStoreMap">
		<result property="id" column="id" />
		<result property="storeId" column="store_id" />
		<result property="standardUnitId" column="standard_unit_id" />
		<result property="platformId" column="platform_id" />
	</resultMap>
	
	<resultMap type="com.egeo.components.product.condition.StandardUnitStoreCondition" 
	id="standardUnitStoreConditionMap" extends="standardUnitStoreMap">
		<result property="standardUnitName" column="standard_unit_name" />
		<result property="standardUnitSerialNumber" column="standard_unit_serial_number" />
		<result property="salePrice" column="sale_price" />
		<result property="promotionPrice" column="promotion_price" />
		<result property="marketPrice" column="market_price" />
		<result property="status" column="status" />
		<result property="isVisible" column="is_visible" />
		<result property="pids" column="pids" />
		<result property="storeName" column="store_name" />
	</resultMap>

	<sql id="standardUnitStoreColumns">
		id,
		store_id,
		standard_unit_id,
		platform_id
	</sql>

	<select id="findById" parameterType="com.egeo.components.product.po.StandardUnitStorePO" resultMap="standardUnitStoreMap">
		SELECT
		<include refid="standardUnitStoreColumns" />
		FROM standard_unit_store
		WHERE id = #{po.id}
	</select>

	<select id="findOfPage" resultMap="standardUnitStoreMap">
		SELECT
		<include refid="standardUnitStoreColumns" />
		FROM standard_unit_store
		<where>
			<if test="po.storeId != null">
				and store_id = #{po.storeId}
			</if>
			<if test="po.standardUnitId != null">
				and standard_unit_id = #{po.standardUnitId}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>		
			<otherwise>
				ORDER BY id desc		
			</otherwise>
		</choose>
		<if test="page != null">
		limit #{page.limitStart},#{page.pageSize}
		</if>
	</select>

	
	<select id="countOfPage" resultType="java.lang.Integer">
		SELECT
		count(1) cnt
		FROM standard_unit_store
		<where>
			<if test="po.storeId != null">
				and store_id = #{po.storeId}
			</if>
			<if test="po.standardUnitId != null">
				and standard_unit_id = #{po.standardUnitId}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
	</select>


	<select id="findStandardUnitStoreCount" resultType="java.lang.Integer">
		SELECT
		count(1) cnt
		FROM standard_unit_store
		<where>
			<if test="storeId != null">
				and store_id = #{storeId}
			</if>
			<if test="suId != null">
				and standard_unit_id = #{suId}
			</if>
		</where>
	</select>
	
	<select id="findAll" resultMap="standardUnitStoreMap">
		SELECT
		<include refid="standardUnitStoreColumns" />
		FROM standard_unit_store
		<where>
			<if test="po.storeId != null">
				and store_id = #{po.storeId}
			</if>
			<if test="po.standardUnitId != null">
				and standard_unit_id = #{po.standardUnitId}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
	</select>
	
	<select id="findStandardUnitStoreAll" resultMap="standardUnitStoreConditionMap">
		SELECT
		sus.id,
		sus.store_id,
		sus.standard_unit_id,
		su.name standard_unit_name
		FROM standard_unit_store sus,standard_unit su
		<where>
			sus.standard_unit_id = su.id
			<if test="po.storeId != null">
				and sus.store_id = #{po.storeId}
			</if>
			<if test="po.standardUnitId != null">
				and sus.standard_unit_id = #{po.standardUnitId}
			</if>
			<if test="po.platformId != null">
				and sus.platform_id = #{po.platformId}
			</if>
		</where>
		group by sus.standard_unit_id
	</select>
	
	<select id="findStandardUnitStoreOfPage" resultMap="standardUnitStoreConditionMap">
		SELECT 
		su.id,
		su.`name` standard_unit_name,
		su.merchant_product_serial_number standard_unit_serial_number,
		su.sale_price,
		su.promotion_price,
		su.market_price,
		su.`status`,
		su.is_visible 
		from standard_unit su, 		
		(SELECT
		su.id
		from standard_unit su, standard_unit_store sus
		<where>
			sus.standard_unit_id = su.id 
			<if test="po.standardUnitName != null">
				and su.`name` like concat('%',#{po.standardUnitName},'%')
			</if>
			<if test="po.standardUnitSerialNumber != null">
				and su.merchant_product_serial_number like concat('%',#{po.standardUnitSerialNumber},'%')
			</if>
			<if test="po.salePriceStart != null">
				and su.sale_price <![CDATA[>=]]> #{po.salePriceStart}
			</if>
			<if test="po.salePriceStop != null">
				and #{po.salePriceStop} <![CDATA[>=]]> su.sale_price
			</if>
			<if test="po.promotionPriceStart != null">
				and su.promotion_price <![CDATA[>=]]> #{po.promotionPriceStart}
			</if>
			<if test="po.promotionPriceStop != null">
				and #{po.promotionPriceStop} <![CDATA[>=]]> su.promotion_price
			</if>
			<if test="po.status != null">
				and su.`status` = #{po.status}
			</if>
			<if test="po.isVisible != null">
				and sus.su.is_visible = #{po.isVisible}
			</if>
			<if test="po.storeId != null">
				and sus.store_id = #{po.storeId}
			</if>
			<if test="po.standardUnitId != null">
				and sus.standard_unit_id = #{po.standardUnitId}
			</if>
			<if test="po.platformId != null">
				and sus.platform_id = #{po.platformId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>		
			<otherwise>
				ORDER BY sus.id desc		
			</otherwise>
		</choose>
		<if test="page != null">
		limit #{page.limitStart},#{page.pageSize}
		</if>) suid
		where suid.id = su.id
	</select>
	
	<select id="countStandardUnitStoreOfPage" resultType="java.lang.Integer">
		SELECT
		count(1) cnt
		from standard_unit su, standard_unit_store sus
		<where>
			sus.standard_unit_id = su.id 
			<if test="po.standardUnitName != null">
				and su.`name` like concat('%',#{po.standardUnitName},'%')
			</if>
			<if test="po.standardUnitSerialNumber != null">
				and su.merchant_product_serial_number like concat('%',#{po.standardUnitSerialNumber},'%')
			</if>
			<if test="po.salePriceStart != null">
				and su.sale_price <![CDATA[>=]]> #{po.salePriceStart}
			</if>
			<if test="po.salePriceStop != null">
				and #{po.salePriceStop} <![CDATA[>=]]> su.sale_price
			</if>
			<if test="po.promotionPriceStart != null">
				and su.promotion_price <![CDATA[>=]]> #{po.promotionPriceStart}
			</if>
			<if test="po.promotionPriceStop != null">
				and #{po.promotionPriceStop} <![CDATA[>=]]> su.promotion_price
			</if>
			<if test="po.status != null">
				and su.`status` = #{po.status}
			</if>
			<if test="po.isVisible != null">
				and sus.su.is_visible = #{po.isVisible}
			</if>
			<if test="po.storeId != null">
				and sus.store_id = #{po.storeId}
			</if>
			<if test="po.standardUnitId != null">
				and sus.standard_unit_id = #{po.standardUnitId}
			</if>
			<if test="po.platformId != null">
				and sus.platform_id = #{po.platformId}
			</if>
		</where>
	</select>
	
	<select id="standardUnitSumByStoreId" resultType="java.lang.Integer">
		SELECT
		count(1) cnt 
		from standard_unit su,standard_unit_store sus
		WHERE 
		sus.standard_unit_id = su.id 
		and su.`status` = 3 
		and su.is_visible = 0 
		and sus.store_id = #{storeId}
		and su.platform_id = #{platformId}
	</select>
	
	<select id="findByPuIdsByStoreId" resultType="java.lang.Long">
		SELECT
		cpu.id
		from standard_unit su,standard_unit_store sus,commodity_product_unit cpu
		WHERE 
		sus.standard_unit_id = su.id 
		and su.id = cpu.standard_unit_id 
		and cpu.is_vendible = 1 
		and sus.store_id = #{storeId}
		and su.platform_id = #{platformId}
	</select>
	
	<select id="standardUnitStoreByStandardUnitId" resultMap="standardUnitStoreConditionMap">
		SELECT
		stn.id,
		stn.pids,
		s.`name` store_name
		FROM standard_unit_store sus,store s,store_tree_node stn
		<where>
			 sus.store_id = s.id and s.id = stn.store_id
			<if test="po.standardUnitId != null">
				and sus.standard_unit_id = #{po.standardUnitId}
			</if>
			<if test="po.platformId != null">
				and sus.platform_id = #{po.platformId}
			</if>
			<if test="po.storeName != null">
				and s.`name` like concat('%',#{po.storeName},'%') 
			</if>
		</where>
	</select>
	
	<select id="findByStoreAndSu" parameterType="com.egeo.components.product.po.StandardUnitStorePO" resultMap="standardUnitStoreMap">
		SELECT
		<include refid="standardUnitStoreColumns" />
		FROM standard_unit_store
		WHERE store_id = #{storeId}
		and platform_id = #{platformId}
		and standard_unit_id in
		<foreach collection="suIdList" item="suId" open="(" separator="," close=")">
			#{suId}
		</foreach>
	</select>
</mapper>
	