<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.egeo.components.promotion.dao.read.ExchangeActivityReadDAO">
	<resultMap type="com.egeo.components.promotion.po.ExchangeActivityPO" id="exchangeActivityMap">
		<result property="id" column="id" />
		<result property="sort" column="sort" />
		<result property="exchangeName" column="exchange_name" />
		<result property="createTime" column="create_time" />
		<result property="updateTime" column="update_time" />
		<result property="endTime" column="end_time" />
		<result property="status" column="status" />
		<result property="platformId" column="platform_id" />
	</resultMap>

	<sql id="exchangeActivityColumns">
		id,
		sort,
		exchange_name,
		create_time,
		update_time,
		end_time,
		status,
		platform_id
	</sql>

	<select id="findById" parameterType="com.egeo.components.promotion.po.ExchangeActivityPO" resultMap="exchangeActivityMap">
		SELECT
		<include refid="exchangeActivityColumns" />
		FROM exchange_activity
		WHERE id = #{po.id}
	</select>

	<select id="findOfPage" resultMap="exchangeActivityMap">
		SELECT
		<include refid="exchangeActivityColumns" />
		FROM exchange_activity
		<where>
			<if test="po.sort != null">
				and sort = #{po.sort}
			</if>
			<if test="po.exchangeName != null">
				and exchange_name = #{po.exchangeName}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.endTime != null">
				and end_time = #{po.endTime}
			</if>
			<if test="po.status != null">
				and status = #{po.status}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
		<choose>
		  	<when test="po.idIcon != null and po.idIcon == 1">
				ORDER BY id desc
			</when>
			<when test="po.sortIcon !=null and po.sortIcon ==1">
				ORDER BY sort asc
			</when>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY id desc
			</otherwise>
		</choose>
		<if test="page != null">
		limit #{page.limitStart},#{page.pageSize}
		</if>
	</select>
	
	<select id="countOfPage" resultType="java.lang.Integer">
		SELECT
		count(1) cnt
		FROM exchange_activity
		<where>
			<if test="po.sort != null">
				and sort = #{po.sort}
			</if>
			<if test="po.exchangeName != null">
				and exchange_name = #{po.exchangeName}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.endTime != null">
				and end_time = #{po.endTime}
			</if>
			<if test="po.status != null">
				and status = #{po.status}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
	</select>
	
	<select id="findAll" resultMap="exchangeActivityMap">
		SELECT
		<include refid="exchangeActivityColumns" />
		FROM exchange_activity
		<where>
			<if test="po.sort != null">
				and sort = #{po.sort}
			</if>
			<if test="po.exchangeName != null">
				and exchange_name = #{po.exchangeName}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.endTime != null">
				and end_time = #{po.endTime}
			</if>
			<if test="po.status != null">
				and status = #{po.status}
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>			
			<otherwise>
				ORDER BY id desc		
			</otherwise>
		</choose>
	</select>

	<select id="countOfFuzzQueryPage" resultType="java.lang.Integer">
		SELECT
		count(1) cnt
		FROM exchange_activity
		<where>
			<if test="po.id != null">
				and id = #{po.id}
			</if>
			<if test="po.sort != null">
				and sort like concat('%', #{po.sort} ,'%')
			</if>
			<if test="po.exchangeName != null">
				and exchange_name like concat('%', #{po.exchangeName} ,'%')
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.endTime != null">
				and end_time = #{po.endTime}
			</if>
			<if test="po.status != null">
				and status like  concat('%', #{po.status} ,'%')
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
	</select>

	<select id="fuzzQueryExchangeActivity" resultMap="exchangeActivityMap">
		SELECT
		<include refid="exchangeActivityColumns" />
		FROM exchange_activity
		<where>
			<if test="po.id != null">
				and id = #{po.id}
			</if>
			<if test="po.sort != null">
				and sort like concat('%', #{po.sort} ,'%')
			</if>
			<if test="po.exchangeName != null">
				and exchange_name like concat('%', #{po.exchangeName} ,'%')
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.endTime != null">
				and end_time = #{po.endTime}
			</if>
			<if test="po.status != null">
				and status like  concat('%', #{po.status} ,'%')
			</if>
			<if test="po.platformId != null">
				and platform_id = #{po.platformId}
			</if>
		</where>
		<choose>
			<when test="po.idIcon != null and po.idIcon == 1">
				ORDER BY id desc
			</when>
			<when test="po.sortIcon !=null and po.sortIcon ==1">
				ORDER BY sort asc
			</when>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY id desc
			</otherwise>
		</choose>
		<if test="page != null">
			limit #{page.limitStart},#{page.pageSize}
		</if>
	</select>



	<select id="findExchangeActivityByIds" resultMap="exchangeActivityMap">
		SELECT
		<include refid="exchangeActivityColumns" />
		FROM exchange_activity
		<where>
			id IN
			<foreach collection="idList" item="id" open="(" separator="," close=")">
				#{id}
			</foreach>
		</where>
	</select>
</mapper>
	