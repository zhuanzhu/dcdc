<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.egeo.components.finance.dao.read.AccountFlowReadDAO">

	<select id="userFinFlowPageTotalCount" resultType="java.lang.Integer">
		select count(0) from account_flow
		<where> (
		outflow_accounttype=1 and
		outflow_accountid in
		(
		<foreach collection="accountIdList" item="id" separator=",">
			#{id}
		</foreach>
		)
		) or (
		inflow_accounttype=1 and inflow_accountid in
		(
		<foreach collection="accountIdList" item="id" separator=",">
			#{id}
		</foreach>
		)
		)
		<if test="startTime!=null">
			and create_time <![CDATA[>=]]> #{startTime}
		</if>
		<if test="endTime!=null">
			and create_time <![CDATA[<=]]>  #{endTime}
		</if>
		</where>
	</select>

	<select id="userFinFlowPage" resultMap="accountFlowMap">
		select * from account_flow
		where (
		outflow_accounttype=1 and
		outflow_accountid in
		(
		<foreach collection="accountIdList" item="id" separator=",">
			#{id}
		</foreach>
		)
		) or (
		inflow_accounttype=1 and inflow_accountid in
		(
		<foreach collection="accountIdList" item="id" separator=",">
			#{id}
		</foreach>
		)
		)
		order by create_time desc
		<if test="page!=null">
		limit #{page.limitStart},#{page.pageSize}
		</if>
	</select>

	<select id="userFinFlowEnterprise" resultMap="accountFlowMap">
		select * from account_flow
		<where>
		enterprise_id= #{enterpriseId}

		<if test="startTime!=null">
			and create_time <![CDATA[>=]]> #{startTime}
		</if>
		<if test="endTime!=null">
			and create_time <![CDATA[<=]]>  #{endTime}
		</if>
		</where>
	</select>
	<select id="userFinFlowCompany" resultMap="accountFlowMap">
		select * from account_flow
		<where>
		company_id= #{companyId}

		<if test="startTime!=null">
			and create_time <![CDATA[>=]]> #{startTime}
		</if>
		<if test="endTime!=null">
			and create_time <![CDATA[<=]]>  #{endTime}
		</if>
		</where>
	</select>

	<select id="queryOrderRefundFlow" resultMap="accountFlowMap">
		select * from
		account_flow
		where order_id=#{orderId}
		and (type=5 or type=6 or type=16 or type=18)
		order by create_time desc
	</select>

	<select id="queryAccountFlowPageByAccountIdTotalSize"
		resultType="java.lang.Integer">
		select count(0) from account_flow
		<where>
			<choose>
				<when test="mode==0">
					inflow_accountid=#{accountId}
					and
					inflow_accounttype=1
				</when>
				<when test="mode==1">
					outflow_accountid=#{accountId}
					and
					outflow_accounttype=1
				</when>
				<otherwise>
					(outflow_accountid=#{accountId}
					and
					outflow_accounttype=1)
					or
					(inflow_accountid=#{accountId}
					and
					inflow_accounttype=1)
				</otherwise>
			</choose>
		</where>
	</select>

	<select id="queryAccountFlowPageByAccountId"
		resultMap="accountFlowMap">
		select * from account_flow
		<where>
			<choose>
				<when test="mode==0">
					inflow_accountid=#{accountId}
					and
					inflow_accounttype=1
				</when>
				<when test="mode==1">
					outflow_accountid=#{accountId}
					and
					outflow_accounttype=1
				</when>
				<otherwise>
					(outflow_accountid=#{accountId}
					and
					outflow_accounttype=1)
					or
					(inflow_accountid=#{accountId}
					and
					inflow_accounttype=1)
				</otherwise>
			</choose>
		</where>
		order by create_time desc
		limit #{page.limitStart},#{page.pageSize}
	</select>

	<select id="queryAccountFlowPageTotalCount"
		resultType="java.lang.Integer">
		select count(0) from account_flow a
		<if test="outflowAccount!=null">
			left join company_account b on a.outflow_accounttype=0
			and
			a.outflow_accountid=b.id
			left join user_account c on
			a.outflow_accounttype=1
			and a.outflow_accountid=c.id
		</if>
		<if test="inflowAccount!=null">
			left join company_account d on a.inflow_accounttype=0
			and
			a.inflow_accountid=d.id
			left join user_account e on
			a.inflow_accounttype=1
			and a.inflow_accountid=e.id
		</if>
		<where>
			<if test="batchId!=null">
				a.batch_id=#{batchId}
			</if>
			<if test="outflowAccount!=null">
				and (b.name like concat('%',#{outflowAccount},'%')
				or
				c.name like concat('%',#{outflowAccount},'%') )
			</if>
			<if test="inflowAccount!=null">
				and (d.name like concat('%',#{inflowAccount},'%')
				or
				e.name like concat('%',#{inflowAccount},'%'))
			</if>
			<if test="sd!=null">
				and create_time &gt; #{sd}
			</if>
			<if test="ed!=null">
				and create_time &lt; #{ed}
			</if>
			<if test="platformId!=null">
				and a.platform_id = #{platformId}
			</if>
		</where>
	</select>

	<select id="queryAccountFlowPage" resultMap="accountFlowMap">
		select a.* from account_flow a
		<if test="outflowAccount!=null">
			left join company_account b on a.outflow_accounttype=0
			and
			a.outflow_accountid=b.id
			left join user_account c on
			a.outflow_accounttype=1
			and a.outflow_accountid=c.id
		</if>
		<if test="inflowAccount!=null">
			left join company_account d on a.inflow_accounttype=0
			and
			a.inflow_accountid=d.id
			left join user_account e on
			a.inflow_accounttype=1
			and a.inflow_accountid=e.id
		</if>
		<where>
			<if test="batchId!=null">
				a.batch_id=#{batchId}
			</if>
			<if test="outflowAccount!=null">
				and (b.name like concat('%',#{outflowAccount},'%')
				or
				c.name like concat('%',#{outflowAccount},'%') )
			</if>
			<if test="inflowAccount!=null">
				and (d.name like concat('%',#{inflowAccount},'%')
				or
				e.name like concat('%',#{inflowAccount},'%'))
			</if>
			<if test="sd!=null">
				and create_time &gt; #{sd}
			</if>
			<if test="ed!=null">
				and create_time &lt; #{ed}
			</if>
			<if test="platformId!=null">
				and a.platform_id = #{platformId}
			</if>
		</where>
		order by create_time desc
		limit #{page.limitStart},#{page.pageSize}
	</select>

	<resultMap type="com.egeo.components.finance.po.AccountFlowPO"
		id="accountFlowMap">
		<result property="id" column="id" />
		<result property="outflowAccountid" column="outflow_accountid" />
		<result property="outflowAccounttype"
			column="outflow_accounttype" />
		<result property="inflowAccountid" column="inflow_accountid" />
		<result property="inflowAccounttype"
			column="inflow_accounttype" />
		<result property="sum" column="sum" />
		<result property="reasonId" column="reason_id" />
		<result property="remark" column="remark" />
		<result property="batchId" column="batch_id" />
		<result property="createTime" column="create_time" />
		<result property="updateTime" column="update_time" />
		<result property="platformId" column="platform_id" />
		<result property="enterpriseId" column="enterprise_id" />
		<result property="ledgerPlateform" column="ledger_plateform" />
		<result property="ledgerEnterprise" column="ledger_enterprise" />
		<result property="type" column="type" />
		<result property="reason" column="reason" />
		<result property="orderId" column="order_id" />
		<result property="orderCode" column="order_code" />
		<result property="currencyType" column="currency_type" />
		<result property="isRead" column="is_read" />
	</resultMap>

	<sql id="accountFlowColumns">
		id,
		outflow_accountid,
		outflow_accounttype,
		inflow_accountid,
		inflow_accounttype,
		sum,
		reason_id,
		remark,
		batch_id,
		create_time,
		update_time,
		type,
		enterprise_id,
		ledger_plateform,
		ledger_enterprise,
		<!-- reason, -->
		currency_type,
		is_read
	</sql>

	<select id="findById"
		parameterType="com.egeo.components.finance.po.AccountFlowPO"
		resultMap="accountFlowMap">
		SELECT
		<include refid="accountFlowColumns" />
		FROM account_flow
		WHERE id = #{po.id}
	</select>

	<select id="findOfPage" resultMap="accountFlowMap">
		SELECT
		<include refid="accountFlowColumns" />
		FROM account_flow
		<where>
			<if test="po.outflowAccountid != null">
				and outflow_accountid = #{po.outflowAccountid}
			</if>
			<if test="po.outflowAccounttype != null">
				and outflow_accounttype = #{po.outflowAccounttype}
			</if>
			<if test="po.inflowAccountid != null">
				and inflow_accountid = #{po.inflowAccountid}
			</if>
			<if test="po.inflowAccounttype != null">
				and inflow_accounttype = #{po.inflowAccounttype}
			</if>
			<if test="po.sum != null">
				and sum = #{po.sum}
			</if>
			<if test="po.reasonId != null">
				and reason_id = #{po.reasonId}
			</if>
			<if test="po.reason != null">
				and reason = #{po.reason}
			</if>
			<if test="po.remark != null">
				and remark = #{po.remark}
			</if>
			<if test="po.batchId != null">
				and batch_id = #{po.batchId}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.currencyType != null">
				and currency_type = #{po.currencyType}
			</if>
		</where>
		<choose>
			<when
				test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY id desc
			</otherwise>
		</choose>
		<if test="page != null">
			limit #{page.limitStart},#{page.pageSize}
		</if>
	</select>

	<select id="countOfPage" resultType="java.lang.Integer">
		SELECT
		count(1) cnt
		FROM account_flow
		<where>
			<if test="po.outflowAccountid != null">
				and outflow_accountid = #{po.outflowAccountid}
			</if>
			<if test="po.outflowAccounttype != null">
				and outflow_accounttype = #{po.outflowAccounttype}
			</if>
			<if test="po.inflowAccountid != null">
				and inflow_accountid = #{po.inflowAccountid}
			</if>
			<if test="po.inflowAccounttype != null">
				and inflow_accounttype = #{po.inflowAccounttype}
			</if>
			<if test="po.sum != null">
				and sum = #{po.sum}
			</if>
			<if test="po.reasonId != null">
				and reason_id = #{po.reasonId}
			</if>
			<if test="po.reason != null">
				and reason = #{po.reason}
			</if>
			<if test="po.remark != null">
				and remark = #{po.remark}
			</if>
			<if test="po.batchId != null">
				and batch_id = #{po.batchId}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.currencyType != null">
				and currency_type = #{po.currencyType}
			</if>
			<if test="po.isRead != null">
				and is_read = #{po.isRead}
			</if>
		</where>
	</select>

	<select id="findAll" resultMap="accountFlowMap">
		SELECT
		<include refid="accountFlowColumns" />
		FROM account_flow
		<where>
			<if test="po.outflowAccountid != null">
				and outflow_accountid = #{po.outflowAccountid}
			</if>
			<if test="po.outflowAccounttype != null">
				and outflow_accounttype = #{po.outflowAccounttype}
			</if>
			<if test="po.inflowAccountid != null">
				and inflow_accountid = #{po.inflowAccountid}
			</if>
			<if test="po.inflowAccounttype != null">
				and inflow_accounttype = #{po.inflowAccounttype}
			</if>
			<if test="po.sum != null">
				and sum = #{po.sum}
			</if>
			<if test="po.reasonId != null">
				and reason_id = #{po.reasonId}
			</if>
			<if test="po.reason != null">
				and reason = #{po.reason}
			</if>
			<if test="po.remark != null">
				and remark = #{po.remark}
			</if>
			<if test="po.batchId != null">
				and batch_id = #{po.batchId}
			</if>
			<if test="po.createTime != null">
				and create_time = #{po.createTime}
			</if>
			<if test="po.updateTime != null">
				and update_time = #{po.updateTime}
			</if>
			<if test="po.currencyType != null">
				and currency_type = #{po.currencyType}
			</if>
			<if test="po.isRead != null">
				and is_read = #{po.isRead}
			</if>
		</where>
		<choose>
			<when
				test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY id desc
			</otherwise>
		</choose>
	</select>
</mapper>
